=head1 LICENSE

Copyright (c) 2007-2009 Illumina, Inc.

This source file is covered by the "Illumina Public Source License"
agreement and bound by the terms therein.

This file is part of the Consensus Assessment of Sequence And VAriation
(CASAVA) software package.

=head1 NAME

SampleSheet-perlunit-06.t

=head1 SYNOPSIS

perl SampleSheet-perlunit-06.t

=head1 DESCRIPTION

This script unit-tests the SampleSheet module.

=head1 DIAGNOSTICS

=head2 Exit status

0: successful completion
1: abnormal completion
2: fatal error

=head2 Errors

All error messages are prefixed with "ERROR: ". The most common error messages are:

=item unknown command line option

read this document for the list of command line options

=head2 Warnings

All warning messages generated by CASAVA are prefixed with "WARNING: ". The most common warnings are:

=item "Did not specify any value for EXPT_DIR"

The base call directory has not been specified

=head1 CONFIGURATION AND ENVIRONMENT

Name and location of configuration files, with a complete description of the properties that can be set.

Name and description of the relevant environment variables

=head1 DEPENDENCIES

Standard perl modules: strict, warnings, Carp, Getopt::Long, Pod::Usage 

External perl modules: XML::Simple

CASAVA perl modules: Casava::Alignment

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

All documented features are fully implemented.

Please report problems to Illumina Technical Support (support@illumina.com)

Patches are welcome.

=head1 AUTHOR

Come Raczy

=cut

use strict;
use Carp;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Test::More tests => 76;
BEGIN 
{
    use_ok('Casava::Demultiplex::SampleSheet');
}

my $sampleSheet = Casava::Demultiplex::SampleSheet->new();
isa_ok( $sampleSheet, 'Casava::Demultiplex::SampleSheet' );

# initialization of a new instance
ok (!defined $sampleSheet->flowCellId, 'Undefined flow cell id');
ok (!defined $sampleSheet->recipe, 'Undefined recipe');
ok (!defined $sampleSheet->operator, 'Undefined operator');
ok (defined $sampleSheet->laneNumbers, 'Defined list of lane numbers');
eval {$sampleSheet->barcodes};
like ($@, qr/^Casava::SampleSheet::barcodes: Unspecified lane/, 'Defined list of barcodes');
ok (!defined $sampleSheet->barcodes(1), 'Undefined list of barcodes');
ok (!defined $sampleSheet->sample(1, 'ACGTAA'), 'Undefined sample');
ok (!defined $sampleSheet->sampleId(1, 'ACGTAA'), 'Undefined sample id');
ok (!defined $sampleSheet->species(1, 'ACGTAA'), 'Undefined species');
ok (!defined $sampleSheet->description(1, 'ACGTAA'), 'Undefined description');
ok (!defined $sampleSheet->control(1, 'ACGTAA'), 'Undefined control');
is ($sampleSheet->laneNumbers, 0,'Empty list of lane numbers');

# setting individual members
$sampleSheet->flowCellId('FC12345');
is($sampleSheet->flowCellId, 'FC12345', 'Assigning flow cell id');
$sampleSheet->recipe('someRecipe');
is($sampleSheet->recipe, 'someRecipe', 'Assigning recipe');
$sampleSheet->operator('someOperator');
is($sampleSheet->operator, 'someOperator', 'Assigning operator');

# setting a sample
my $sample = {SAMPLE_ID=>"s_1", SPECIES=>'Human', DESCRIPTION=>'some description', CONTROL=>0};
$sampleSheet->sample(7, 'ACGTAA', $sample);
is ($sampleSheet->sample(7, 'ACGTAA'), $sample, 'Checking the whole sample');

# checking non existing barcodes in an existing lane
is ($sampleSheet->laneNumbers, 1,'One single lane numbers');
ok (defined $sampleSheet->barcodes(7), 'Defined list of barcodes');
is ($sampleSheet->barcodes(7), 1, 'One single barcode in the lane');
ok (!defined $sampleSheet->sample(7, 'XCGTAA'), 'Undefined sample');
ok (!defined $sampleSheet->sampleId(7, 'XCGTAA'), 'Undefined sample id');
ok (!defined $sampleSheet->species(7, 'XCGTAA'), 'Undefined species');
ok (!defined $sampleSheet->description(7, 'XCGTAA'), 'Undefined description');
ok (!defined $sampleSheet->control(7, 'XCGTAA'), 'Undefined control');
is ($sampleSheet->laneNumbers, 1,'One single lane numbers');
is ($sampleSheet->barcodes(7), 1, 'One single barcode in the lane');

# checking the existing values in the valid (lane, barcode)
is (($sampleSheet->laneNumbers)[0], 7,'Checking the lane number');
is ($sampleSheet->sampleId(7, 'ACGTAA'), $sample->{SAMPLE_ID}, 'Checking sample id');
is ($sampleSheet->species(7, 'ACGTAA'), $sample->{SPECIES}, 'Checking species');
is ($sampleSheet->description(7, 'ACGTAA'), $sample->{DESCRIPTION}, 'Checking description');
is ($sampleSheet->control(7, 'ACGTAA'), $sample->{CONTROL}, 'Checking control');


1;
__END__

